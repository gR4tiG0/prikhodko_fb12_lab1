uint64_t* bn_kMul(uint64_t* num1, uint64_t* num2, int size){
        if (size == 1){
            printf("We got to 1x1 mul: \n"); 
            printf("num1=%lu, num2=%lu\n",num1[0],num2[0]);
            uint64_t* result = new uint64_t[4*size]();
            mul(result,num1,num2,size);    
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",result[i]);
            }
            printf("\n");
            printf("end of 1x1 mul\n");    
            return result;
        } else {
            int m;
            printf("Size income os %i\n",size);
            if (size%2 == 1 && (size/2) != 1) m = (size/2) + 1;
            else m = size/2;
            printf("M size is: %i\n",m);
            uint64_t* a_l = new uint64_t[size*2]();
            uint64_t* a_h = new uint64_t[size*2]();
            uint64_t* b_l = new uint64_t[size*2]();
            uint64_t* b_h = new uint64_t[size*2]();
            uint64_t* z0 = new uint64_t[size*2]();
            uint64_t* z2 = new uint64_t[size*2]();
            for (int i=0;i<m;i++){
                a_l[i] = num1[i];
                b_l[i] = num2[i];
            }
            for (int i=m;i<size;i++){
                a_h[i-m] = num1[i];
                b_h[i-m] = num2[i];
            }
            printf("al\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",a_l[i]);
            }
            printf("\n");            
            printf("bl\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",b_l[i]);
            }
            printf("\n");
            printf("ah\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",a_h[i]);
            }
            printf("\n");            
            printf("bh\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",b_h[i]);
            }
            printf("\n");
            printf("z0\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z0[i]);
            }
            printf("\n");            
            printf("z2\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z2[i]);
            }
            printf("\n");
            z2 = bn_kMul(a_l,b_l,m);
            z0 = bn_kMul(a_h,b_h,m);
 
            printf("z0\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z0[i]);
            }
            printf("\n");            
            printf("z2\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z2[i]);
            }
            printf("\n");
            uint64_t* z1 = new uint64_t[size*2]();
            uint64_t* z1t = new uint64_t[size*2]();
            uint64_t* res = new uint64_t[size*2]();
            uint64_t* rest = new uint64_t[size*2]();
            uint64_t* r1 = new uint64_t[size*2]();
            uint64_t* r2 = new uint64_t[size*2]();
            bn_add(r1,a_h,a_l,size*2);
            bn_add(r2,b_h,b_l,size*2);
            printf("r1\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",r1[i]);
            }
            printf("\n");            
            printf("r2\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",r2[i]);
            }
            printf("\n");
            int n = size;
            if (r1[m] == 0 and r2[m] == 0) n = m;
            uint64_t* tmp = bn_kMul(r1,r2,n);
            printf("tmp\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",tmp[i]);
            }
            printf("\n");
            bn_sub(z1t,tmp,z0,size*2);
            bn_sub(z1,z1t,z2,size*2);
            printf("z1\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z1[i]);
            }
            printf("\n");
            shiftLeft(z0,size,size*2);
            printf("z0 after shift\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z0[i]);
            }
            printf("\n");
            shiftLeft(z1,m,size*2);
            printf("z1 after shift\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",z1[i]);
            }
            printf("\n");
            bn_add(rest,z0,z1,size*2);
            printf("rest\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",rest[i]);
            }
            printf("\n");
            bn_add(res,rest,z2,size*2);
            printf("result\n");
            for (int i = 0;i<size*2;i++) {
                printf("%lu ",res[i]);
            }
            printf("\n");
            return res;
        }
    }
